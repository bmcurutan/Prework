# Programming > Hashing > Substring Concatenation

public class Solution {
	public ArrayList<Integer> findSubstring(String a, final List<String> b) {
	    ArrayList<Integer> indices = new ArrayList<Integer>();
	    
	    if (a.length() < 1 || b.size() < 1) {
	        return indices;
	    }
	    
	    int wordLength = b.get(0).length();
	    for (int i = 0; i + (wordLength * b.size()) <= a.length(); i++) {
            String substring = a.substring(i, i + (wordLength * b.size()));
            if (process(substring, b)) {
                indices.add(i);
            }
	    }
	    
	    return indices;
	}
	
	private boolean process(String s, List<String> b) {
	    int wordLength = b.get(0).length();
	    Map<String, Integer> words = new HashMap<String, Integer>();
	    for (int i = 0; i < b.size(); i++) {
	        String someB = b.get(i);
	        if (words.containsKey(someB)) {
	            words.put(someB, words.get(someB)+1);
	        } else {
	            words.put(someB, 1);
	        }
	    }
	    
	    for (int i = 0; i + wordLength <= s.length(); i += wordLength) {
	        String substring = s.substring(i, i + wordLength);
	        if (words.containsKey(substring)) {
	            words.put(substring, words.get(substring)-1);
	        } else {
	            return false;
	        }
	    }
	    
	    for (Integer count : words.values()) {
	        if (count != 0) {
	            return false;
	        }
	    }
	    
	    return true;
	}
}
