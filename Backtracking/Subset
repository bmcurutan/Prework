# Programming > Backtracking > Subset

public class Solution {
	public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> a) {
	    Collections.sort(a);
	    ArrayList<Integer> empty = new ArrayList<Integer>();
	    ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
	    res.add(empty);
	    
	    if (null == a || a.size() == 0) {
	        return res;
	    } 
	    
	    addSubsets(res, a, 0);
	    
	    Collections.sort(res, new Comparator<ArrayList<Integer>>() {
            public int compare(ArrayList<Integer> a, ArrayList<Integer> b) {
                if (a.size() < 1) {
                    return -1;
                } else if (b.size() < 1) {
                    return 1;
                } 
                int i = 0;
                while (i < a.size()-1 && i < b.size()-1 && a.get(i) == b.get(i)) {
                    i++;
                }
                if (a.get(i) < b.get(i)) {
                    return -1;
                } else if (b.get(i) < a.get(i)) {
                    return 1; 
                } else { 
                    return 0;
                }
            }
        });
	    return res;
	}
	
	private void addSubsets(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> a, int i) {
	    if (i < 0 || i >= a.size()) {
	        return;
	    }
	    
	    ArrayList<ArrayList<Integer>> tempRes = new ArrayList<ArrayList<Integer>>();
	    for (ArrayList<Integer> set : res) {
	        ArrayList<Integer> tempSet = copy(set);
	        tempSet.add(a.get(i));
	        Collections.sort(tempSet);
	        tempRes.add(tempSet);
	    }
	    for (ArrayList<Integer> set : tempRes) {
	        if (!res.contains(set)) {
	            res.add(set);
	        }
	    }
	    
	    addSubsets(res, a, i+1);
	}
	
	private ArrayList<Integer> copy(ArrayList<Integer> set) {
	    ArrayList<Integer> newSet = new ArrayList<Integer>();
	    for (int i = 0; i < set.size(); i++) {
	        newSet.add(set.get(i));
	    }
	    return newSet;
	}
}
