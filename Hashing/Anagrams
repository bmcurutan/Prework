# Programming > Hashing > Anagrams

public class Solution {
	public ArrayList<ArrayList<Integer>> anagrams(final List<String> a) {
	    ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	    int n = a.size();
	    if (n < 1) {
	        return result;
	    } else if (n == 1) {
	        ArrayList<Integer> temp = new ArrayList<Integer>();
	        temp.add(1);
	        result.add(temp);
	        return result;
	    }
	    
	    Map<String, ArrayList<Integer>> map = new HashMap<String, ArrayList<Integer>>();
	    for (int i = 0; i < n; i++) {
	        String curr = alphaOrder(a.get(i));
	        if (!map.containsKey(curr)) {
	            ArrayList<Integer> groups = new ArrayList<Integer>();
	            groups.add(i+1);
	            map.put(curr, groups);
	        } else {
	            ArrayList<Integer> groups = map.get(curr);
	            groups.add(i+1);
	            map.put(curr, groups);
	        }
	    }
	    
	    for (ArrayList<Integer> group : map.values()) {
	        result.add(group);
	    }
	    return result;
	}
	
	private String alphaOrder(String s) {
	    if (s.length() < 2) {
	        return s;
	    }
	    
	    char[] chars = s.toCharArray();
	    for (int i = 0; i < chars.length; i++) {
	        for (int j = i+1; j < chars.length; j++) {
	            if (chars[j] < chars[i]) {
	                char temp = chars[i];
	                chars[i] = chars[j];
	                chars[j] = temp;
	            }
	        }
	    }
	    return new String(chars);
	}
}
