# Programming > Greedy > Highest Product

public class Solution {
    public int maxp3(ArrayList<Integer> a) {
        if (a.size() < 3) {
            return -1;
        } else if (a.size() == 3) {
            return a.get(0) * a.get(1) * a.get(2);
        }
        
        Set<Integer> exclude = new HashSet<>();
        int max1 = getMax(a, exclude);
        int max2 = getMax(a, exclude);
        int max3 = getMax(a, exclude);
        
        Set<Integer> exclude2 = new HashSet<>();
        int min1 = getMinNeg(a, exclude2);
        int min2 = getMinNeg(a, exclude2);
        
        //System.out.println(max1 + " " + max2 + " " +max3 + " " + min1 + " " + min2);
        //System.out.println((max1 * max2 * max3)+  " " + (max1 * min1 * min2));
        int res = Math.max(max1 * max2 * max3, max1 * min1 * min2);
        return res;
    }
    
    private int getMinNeg(ArrayList<Integer> a, Set<Integer> exclude) {
        int min = 0;
        int j = -1;
        
        for (int i = 0; i < a.size(); i++) {
            if (a.get(i) < min && !exclude.contains(i)) {
                min = a.get(i);
                j = i;
            }
        }
        
        if (j != -1) {
            exclude.add(j);
        }
        
        return min;
    }
    
    private int getMax(ArrayList<Integer> a, Set<Integer> exclude) {
        int max = Integer.MIN_VALUE;
        int j = -1;
        
        for (int i = 0; i < a.size(); i++) {
            if (a.get(i) > max && !exclude.contains(i)) {
                max = a.get(i);
                j = i;
            }
        }
        
        if (j != -1) {
            exclude.add(j);
        }
        
        return max;
    }
}
