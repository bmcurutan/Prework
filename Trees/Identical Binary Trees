# Programming > Trees > Identical Binary Trees

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public int isSameTree(TreeNode a, TreeNode b) {
	    if (a == null && b == null) {
	        return 1;
	    } else if ((a == null && b != null) || (a != null && b == null)) {
	        return 0;
	    }
	    
	    ArrayList<Integer> a1 = new ArrayList<>();
	    Queue<TreeNode> q1 = new LinkedList<>();
	    q1.add(a);
	    while (!q1.isEmpty()) {
	        TreeNode node = q1.poll();
	        if (node != null) {
	            a1.add(node.val);
    	        q1.add(node.left); 
    	        q1.add(node.right);
	        } else {
	            a1.add(-1);
	        }
	    }
	    
	    ArrayList<Integer> b1 = new ArrayList<>();
	    Queue<TreeNode> q2 = new LinkedList<>();
	    q2.add(b);
	    while (!q2.isEmpty()) {
	        TreeNode node = q2.poll();
	        if (node != null) {
	            b1.add(node.val);
    	        q2.add(node.left); 
    	        q2.add(node.right);
	        } else {
	            b1.add(-1);
	        }
	    }
	    
	    if (a1.size() != b1.size()) {
	        return 0;
	    }
	    for (int i = 0; i < a1.size(); i++) {
	        if (a1.get(i).intValue() != b1.get(i).intValue()) {
	            return 0;
	        }
	    }
	    
	    return 1;
	}
}
